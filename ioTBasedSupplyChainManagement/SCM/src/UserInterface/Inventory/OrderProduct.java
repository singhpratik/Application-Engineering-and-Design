/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Inventory;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organisation.InventoryOrganisation;
import Business.Organisation.Organisation;
import Business.Organisation.WarehouseOrganisation;
import Business.Product.Product;
import Business.Product.ProductCatalog;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pratik Singh <pratiksingh>
 */
public class OrderProduct extends javax.swing.JPanel {

    /**
     * Creates new form OrderProduct
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    EcoSystem system;
    Organisation organisation;
    InventoryOrganisation invOrgansiation;

    public OrderProduct(JPanel userProcessContainer, Enterprise enterprise, EcoSystem system, Organisation organisation) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.system = system;
        this.invOrgansiation = (InventoryOrganisation) organisation;
        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();

        model.setRowCount(0);

        // Organisation warhouseOrganisation;
        for (Organisation warOrganisation : enterprise.getOrganisationDirectory().getOrganisationList()) {
            if (warOrganisation instanceof WarehouseOrganisation) {
                for (Product product : ((WarehouseOrganisation) warOrganisation).getProductCatalog().getProductList()) {

                    Object[] row = new Object[2];
                    row[0] = product;
                    row[1] = product.getpQquantity();
                    model.addRow(row);

                }
                break;
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        productQuantitySpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Product", "Available Quantity"
            }
        ));
        jScrollPane1.setViewportView(productTable);

        jButton1.setText("<< Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Place Order");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter the quantity to be pulled from warehouse");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Place order from the Warehouse");
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(productQuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(116, 116, 116))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel1)
                    .addComponent(productQuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(107, 107, 107))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        int quantity = (int) productQuantitySpinner.getValue();

        int selRow = productTable.getSelectedRow();

        if (selRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select the item", "Item not selected", JOptionPane.ERROR_MESSAGE);

        } else {
            Product product = (Product) productTable.getValueAt(selRow, 0);
            boolean flag = false;
                if(invOrgansiation .getInvProductList() == null){
                    invOrgansiation.setInvProductList(new ProductCatalog());
                }
                
                 for (Product mProduct : invOrgansiation.getInvProductList().getProductList()) {
                    if (mProduct.getpName().equals(product.getpName())) {
                        
                        if(product.getpQquantity()==0)
                        {
                         JOptionPane.showMessageDialog(null, "Product is Out of Stock", "ERROR", JOptionPane.ERROR_MESSAGE);
                           return;
                        }
                        
                        if(quantity>=product.getpQquantity())
                        {
                         JOptionPane.showMessageDialog(null, "Product quantity should be less then the warehouse quantity", "ERROR", JOptionPane.ERROR_MESSAGE);
                           return;
                        }else{
                        mProduct.setpQquantity(mProduct.getpQquantity() + quantity);
                        product.setpQquantity(product.getpQquantity() - quantity);
                        flag = true;
                        JOptionPane.showMessageDialog(null, "Product has been added successfully", "Product added", JOptionPane.INFORMATION_MESSAGE);

                        break;
                        
                        }
                    } else {
                        flag = false;
                    }

                }
            
                  
                 if (!flag) {
                     if(quantity>=product.getpQquantity()){
                      
                      JOptionPane.showMessageDialog(null, "Product quantity should be less then the warehouse quantity", "ERROR", JOptionPane.ERROR_MESSAGE);
                           return;
                  }
                      if(product.getpQquantity()==0)
                        {
                         JOptionPane.showMessageDialog(null, "Product is Out of Stock", "ERROR", JOptionPane.ERROR_MESSAGE);
                           return;
                        }
                Product invProduct = new Product();
                invProduct = invOrgansiation.getInvProductList().addProduct(invProduct);
                invProduct.setpName(product.getpName());
                invProduct.setpQquantity(quantity);
                product.setpQquantity(product.getpQquantity() - quantity);
                JOptionPane.showMessageDialog(null, "Product has been added successfully", "Product added", JOptionPane.INFORMATION_MESSAGE);

            }
            
            populateTable();
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
             userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        InventoryJPanel dwjp = (InventoryJPanel) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner productQuantitySpinner;
    private javax.swing.JTable productTable;
    // End of variables declaration//GEN-END:variables
}
