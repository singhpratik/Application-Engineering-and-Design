/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.TransportationRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organisation.FreightOrganisation;
import Business.Organisation.Organisation;
import Business.Organisation.TransportOrganisation;
import Business.Product.Product;
import Business.Status.Status;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FreightRequest;
import Business.WorkQueue.TransportWorkRequest;
import Business.WorkQueue.WarehouseWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pratik Singh <pratiksingh>
 */
public class TransportProcessRequest extends javax.swing.JPanel {

    EcoSystem system;
    JPanel userProcessContainer;
    UserAccount account;
    TransportOrganisation organisation;

    Enterprise enterprise;
    Product product = new Product();
    int productQuantity = 0;
    UserAccount warUsername = new UserAccount();
    int requestId = 0;

    /**
     * Creates new form TransportProcessRequest
     */
    public TransportProcessRequest(JPanel userProcessContainer, UserAccount account, Organisation organisation, EcoSystem system, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.account = account;
        this.organisation = (TransportOrganisation) organisation;

        this.enterprise = enterprise;
        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) transportWorkRequestTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : organisation.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();
            row[4] = request.getProduct();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        transportWorkRequestTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();

        transportWorkRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Product"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        transportWorkRequestTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                transportWorkRequestTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(transportWorkRequestTable);

        assignJButton.setText("Assign to me");
        assignJButton.setToolTipText("Click to assign the request to yourself");
        assignJButton.setEnabled(false);
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        jButton1.setText("<< Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Process");
        jButton2.setToolTipText("Click to forward the request to Freight Operator");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Supplier Requests", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel2.setText("Below table shows the requests from the supplier");

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(assignJButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(264, 264, 264)
                        .addComponent(jButton2))
                    .addComponent(jLayeredPane1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(171, 171, 171))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(89, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = transportWorkRequestTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        } else {
            
            
            WorkRequest request = (WorkRequest) transportWorkRequestTable.getValueAt(selectedRow, 0);
//            if(!request.getReceiver().toString().equals(account.getEmployee().getName().toString()))
//            {
//                 JOptionPane.showMessageDialog(null, "The request is assigned to other user", "Error:", JOptionPane.ERROR_MESSAGE);
//
//            }else if(!request.getStatus().equals("Sent")){
//                  JOptionPane.showMessageDialog(null, "The request is already been picked", "Error:", JOptionPane.ERROR_MESSAGE);
//
//            }else{
                request.setReceiver(account);
                request.setStatus("Pending");
                
                populateTable();
                jButton2.setEnabled(true);
                assignJButton.setEnabled(false);
            
        }

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = transportWorkRequestTable.getSelectedRow();
        WarehouseWorkRequest warehouseWorkRequest = null;
        if (selectedRow >= 0) {

            TransportWorkRequest request = (TransportWorkRequest) transportWorkRequestTable.getValueAt(selectedRow, 0);
            request.getWareHousWorkRequest().setOrderRequestStatus(3);
            
            warehouseWorkRequest = request.getWareHousWorkRequest();
            request.setStatus("Processing");

            request.setTestResult("Forwarded the request for Shipment");
            request.setStatus("Completed");
            product = request.getProduct();
            warUsername = request.getWarehouseUserName();
            productQuantity = request.getProductQuantity();
            requestId = request.getRequestId();
            System.out.println(product + "USername " + warUsername);
            populateTable();
              JOptionPane.showMessageDialog(null, "Request "+request.getRequestId()+" is forwarded to Freight Operator", "INFO", JOptionPane.INFORMATION_MESSAGE);
              jButton2.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(null, "Select request for processing", "Select request", JOptionPane.ERROR_MESSAGE);
        }
        //Request has been forwarded to the freight department
        FreightRequest request = new FreightRequest();
        request.setMessage("Message");
        request.setSender(account);
        request.setStatus("Sent");
        request.setProduct(product);
        request.setWarehouseUserName(warUsername);
        request.setProductQuantity(productQuantity);
        request.setRequestId(requestId);
        request.setWarehouseWorkRequest(warehouseWorkRequest);
        System.out.println("Freight request uuser name"+request.getWarehouseUserName());
       
        
        
        //*******Hash Map Implement
        Status.getInstance().getStatusCheck().put(request.getRequestId(), 3);
        //***Hash map implement
        System.out.println("Freight Product Quantity" + request.getProductQuantity());
        Organisation org = null;
        for (Organisation organization : enterprise.getOrganisationDirectory().getOrganisationList()) {
            if (organization instanceof FreightOrganisation) {
                org = organization;
                break;
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(request);
            account.getWorkQueue().getWorkRequestList().add(request);
        }
assignJButton.setEnabled(false);
assignJButton.setEnabled(false);
        //Request has been forwarded to the freight department

    }//GEN-LAST:event_jButton2ActionPerformed

    private void transportWorkRequestTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transportWorkRequestTableMouseClicked
  int selectedRow = transportWorkRequestTable.getSelectedRow();
        WorkRequest request = (WorkRequest) transportWorkRequestTable.getValueAt(selectedRow, 0);
            
            if(request.getReceiver()==null)
            {
             assignJButton.setEnabled(true);
            }else if(!request.getReceiver().toString().equals(account.getEmployee().getName().toString())){
                assignJButton.setEnabled(false);
            }else if(!request.getStatus().equalsIgnoreCase("Sent")){
                assignJButton.setEnabled(false);
            }
            
            if(request.getStatus().equalsIgnoreCase("Pending"))
            {//&&request.getReceiver().toString().equals(account.getEmployee().getName().toString())
                jButton2.setEnabled(true);
            }else{
            jButton2.setEnabled(false);
            }
            
    }//GEN-LAST:event_transportWorkRequestTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable transportWorkRequestTable;
    // End of variables declaration//GEN-END:variables
}
