/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.WarehouseRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organisation.Organisation;
import Business.Product.Product;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pratik Singh <pratiksingh>
 */
public class OrderFromSupplier extends javax.swing.JPanel {

    JPanel userProcessContainer;
    EcoSystem system;
    Organisation organisation;
    Enterprise enterprise;
    UserAccount account;
    ArrayList<Product> analyticsProductlict;
    Network network;

    /**
     * Creates new form OrderFromSupplier
     */
    public OrderFromSupplier(JPanel userProcessContainer, UserAccount account, EcoSystem system, Organisation organisation, Enterprise enterprise,ArrayList<Product> analyticsProductlict, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.organisation = organisation;
        this.system = system;
        this.account = account;
        this.network = network;
        this.analyticsProductlict = analyticsProductlict;
        populateMasterProductTable();
    }

    public void populateMasterProductTable() {

        DefaultTableModel dtm = (DefaultTableModel) masterProductTable.getModel();
        int rowCount = masterProductTable.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }
        
        for (Product product : enterprise.getProductMasterList().getProductList()) {
        
            
//for (Product product : organisation.getProductMasterList().getProductList()) {
            Object row[] = new Object[4];//Used to do operations on the Table.The rows and columns are created using this. The new Object[2] represents the column
            row[0] = product;
            row[1] = product.getPrice();
            row[2] = product.getpQquantity();
            row[3] = product.getSupplier();

            dtm.addRow(row);
        }
        
        if(dtm.getRowCount()==0)
        {
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
           jButton3.setEnabled(false);
        }else{
            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        masterProductTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        searchProdcut = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setPreferredSize(new java.awt.Dimension(900, 900));

        masterProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product Name", "Product Cost", "Quantity", "Supplier Name"
            }
        ));
        jScrollPane2.setViewportView(masterProductTable);

        jButton1.setText("Proceed to Place Order");
        jButton1.setToolTipText("Click to proceed with the order processing.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Search Product By Name");
        jButton2.setToolTipText("search product");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Clear Search");
        jButton3.setToolTipText("see all the products from the supplier");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        backJButton.setText("<<Back");
        backJButton.setToolTipText("Click to go back on previous screen.");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Below is the list of products available with the supplier. Click on Place Order to proceed.");

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Browse Supplier Catalog to place the Order");
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(209, 209, 209)
                            .addComponent(jButton1))
                        .addComponent(jScrollPane2)
                        .addComponent(jLayeredPane1)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchProdcut, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(searchProdcut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(backJButton))
                .addGap(511, 511, 511))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedItem = masterProductTable.getSelectedRow();
        if (selectedItem >= 0) {
            Product product = (Product) masterProductTable.getValueAt(selectedItem, 0);

            WarehousePlaceOrderJPanel warehousePlaceOrder = new WarehousePlaceOrderJPanel(userProcessContainer, account, system, enterprise, organisation, product,analyticsProductlict,network);
            userProcessContainer.add("Place order from supplier", warehousePlaceOrder);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(null, "Please select the product to proceed with the order placement", "No Product selected", JOptionPane.ERROR_MESSAGE);
        }
//         Product product = new Product();
//            
//        WarehousePlaceOrderJPanel warehousePlaceOrder = new WarehousePlaceOrderJPanel(userProcessContainer,account, system,enterprise,organisation,product);
//        userProcessContainer.add("Place order from supplier",warehousePlaceOrder);
//        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (searchProdcut.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the product name to be searched", "Search Field Empty ", JOptionPane.ERROR_MESSAGE);

        } else {
            String pName = searchProdcut.getText().trim();
            ArrayList<Product> searchProduct = enterprise.getProductMasterList().searchAccount(pName);
            if (searchProduct == null) {
                JOptionPane.showMessageDialog(null, "No product found", "Information", JOptionPane.ERROR_MESSAGE);

            } else {
                //System.out.println("The product searched is " + product);
                populateSearchTable(searchProduct);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        populateMasterProductTable();
        searchProdcut.setText("");

    }//GEN-LAST:event_jButton3ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    public void populateSearchTable(ArrayList<Product> searchProduct) {
        DefaultTableModel dtm = (DefaultTableModel) masterProductTable.getModel();
        int rowCount = masterProductTable.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }
        for (Product product : searchProduct) {
            Object row[] = new Object[4];//Used to do operations on the Table.The rows and columns are created using this. The new Object[2] represents the column
            row[0] = product;
            row[1] = product.getPrice();
            row[2] = product.getpQquantity();
            row[3] = product.getSupplier();
            dtm.addRow(row);
        }
        
        if(dtm.getRowCount()==0)
        {
            JOptionPane.showMessageDialog(null, "no product found.Please enter another product", "Sorry", JOptionPane.INFORMATION_MESSAGE);
            populateMasterProductTable();
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable masterProductTable;
    private javax.swing.JTextField searchProdcut;
    // End of variables declaration//GEN-END:variables
}
