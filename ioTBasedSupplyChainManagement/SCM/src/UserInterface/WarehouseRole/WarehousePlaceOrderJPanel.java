/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.WarehouseRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organisation.Organisation;
import Business.Organisation.SupplierOrganisation;
import Business.Organisation.WarehouseOrganisation;
import Business.Product.Product;
import Business.Product.ProductCatalog;
import Business.Status.Status;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WarehouseWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pratik Singh <pratiksingh>
 */
public class WarehousePlaceOrderJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    UserAccount account;
    EcoSystem system;
    Enterprise enterprise;
    WarehouseOrganisation organisation;
    Product product;
    ArrayList<Product> analyticsProductlict;
    int requestIdCount = 0;
    Network network;

    /**
     * Creates new form WarehousePlaceOrderJPanel
     */
    public WarehousePlaceOrderJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system, Enterprise enterprise, Organisation organisation, Product product, ArrayList<Product> analyticsProductlict, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.system = system;
        this.organisation = (WarehouseOrganisation) organisation;
        this.enterprise = enterprise;
        this.product = product;
        this.analyticsProductlict = analyticsProductlict;
        this.network = network;

        setProductDetails();
//        populateRequestTable();

    }

    public void setProductDetails() {
        productName.setText(product.getpName());
        actualQuantity.setText(String.valueOf(product.getpQquantity()));
        jTextField2.setText(String.valueOf(product.getSupplier()));
    }

//    public void populateRequestTable() {
//
//        DefaultTableModel model = (DefaultTableModel) wareHouseWorkRequest.getModel();
//        model.setRowCount(0);
//
//        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
//            Object[] row = new Object[5];
//            row[0] = request;
//            row[1] = request.getProduct();
//            row[2] = request.getReceiver();
//            row[3] = request.getStatus();
//            String result = ((WarehouseWorkRequest) request).getTestResult();
//            row[4] = result == null ? "Waiting" : result;
//            model.addRow(row);
//
//        }
//
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        messageJTextField = new javax.swing.JTextField();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        productName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        actualQuantity = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jTextField3 = new javax.swing.JTextField();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jLabel7 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        jButton1.setText("Place Order");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("<<Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Message to the supplier");

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Product Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel2.setText("Total quantity Available");

        productName.setEnabled(false);

        jLabel1.setText("Product");

        jTextField2.setEnabled(false);

        actualQuantity.setEnabled(false);

        jLabel6.setText("Supplier");

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(productName)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actualQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actualQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(productName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jTextField2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(actualQuantity, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Select Quantity", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jTextField3.setEnabled(false);

        jSpinner1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSpinner1MouseClicked(evt);
            }
        });
        jSpinner1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jSpinner1CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jSpinner1InputMethodTextChanged(evt);
            }
        });

        jLabel3.setText("Enter the quantity to be ordered:");

        jButton3.setText("Check Total Amount");
        jButton3.setToolTipText("click to ceck the total cost");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );
        jLayeredPane2.setLayer(jTextField3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jSpinner1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("PLace Order");
        jLabel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLayeredPane3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setText("Verify the product and chose the quantity as per the availability.Next, click on Place Oder.");

        javax.swing.GroupLayout jLayeredPane3Layout = new javax.swing.GroupLayout(jLayeredPane3);
        jLayeredPane3.setLayout(jLayeredPane3Layout);
        jLayeredPane3Layout.setHorizontalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addContainerGap())
        );
        jLayeredPane3Layout.setVerticalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addContainerGap())
        );
        jLayeredPane3.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(297, 297, 297)
                        .addComponent(jButton1))
                    .addComponent(jLayeredPane3)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(messageJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLayeredPane2))
                .addContainerGap(354, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(messageJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addGap(60, 60, 60)
                .addComponent(jLabel8)
                .addContainerGap(133, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//         CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//        userProcessContainer.add("RequestLabTestJPanel", new RequestWarehouseOrderJPanel(userProcessContainer,system, account, enterprise,product));
//        layout.next(userProcessContainer);

        try {

            for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
                requestIdCount++;
            }

            int quant = (int) jSpinner1.getValue();

            if (quant > 500) {
                JOptionPane.showMessageDialog(null, "Maximum quantity that can be ordered at a time is 500", "ERROR", JOptionPane.ERROR_MESSAGE);
                jSpinner1.setValue(0);
                jTextField3.setText("");
                return;
            }

            if (quant == 0) {

                JOptionPane.showMessageDialog(null, "Please enter the quantity to be ordered", "Quantity", JOptionPane.ERROR_MESSAGE);
                jSpinner1.setValue(0);
                jTextField3.setText("");
                return;
            } else if (quant > product.getpQquantity()) {
                JOptionPane.showMessageDialog(null, "Not enough quantity available", "Quantity", JOptionPane.ERROR_MESSAGE);
                jSpinner1.setValue(0);
                jTextField3.setText("");
                return;
            } else {
                String message = messageJTextField.getText();

                WarehouseWorkRequest request = new WarehouseWorkRequest();
                request.setMessage(message);
                request.setProduct(product);
                request.setSender(account);
                request.setReceiver(product.getSupplier());
                request.setProductQuantity(quant);
                request.setWarehouseUpdate("false");
                request.setWarehouseUserName(account);
                request.setRequestOrderDate("2015");
                request.setRequestId(requestIdCount);
                request.setOrderRequestStatus(1);

            //****************
             //****************
                //****Setting the hash map
                Status.getInstance().getStatusCheck().put(request.getRequestId(), 1);
                //****Setting the hash map
                requestIdCount = 0;

                System.out.println("************************" + request.getRequestId());

                request.setStatus("Sent");
                Organisation org = null;

                for (Enterprise warEnterprise : network.getEnterpriseDirectory().getEnterpriseList()) {

                    if (warEnterprise.getEnterpriseType().getValue().equals("Supplier")) {
                        for (Organisation organisation : warEnterprise.getOrganisationDirectory().getOrganisationList()) {
                            if (organisation instanceof SupplierOrganisation) {
                                org = organisation;
                                break;
                            }
                        }
                    }
                }

                if (org != null) {
                    org.getWorkQueue().getWorkRequestList().add(request);
                    account.getWorkQueue().getWorkRequestList().add(request);
                }

//            populateRequestTable();
                addProductAnalytics();
                JOptionPane.showMessageDialog(null, "Order placed successfully", "Info", JOptionPane.INFORMATION_MESSAGE);
            }

            messageJTextField.setText("");
            messageJTextField.setEnabled(false);
            jButton1.setEnabled(false);
            jSpinner1.setValue(0);
            jTextField3.setText("");
        } catch (Exception e) {
            System.out.printf("Error");
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    public void addProductAnalytics() {
        analyticsProductlict = new ArrayList<>();
//        for(int i=0;i<analyticsProductlict.size();i++)
//        {
//            analyticsProductlict.remove(i);
//        }

        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {   //System.out.println();
            if (request.getRequestOrderDate() == null) {
                System.out.println("Null" + request.getProduct());
            } else if (request.getRequestOrderDate().equals("2011")) {
                boolean flag = false;
                //for loop for checking whther the same product exists for 2011
                for (Product product : analyticsProductlict) {
                    if ((product.getpName().equals(request.getProduct().getpName())) && (product.getOrderDate().toString().equals(request.getRequestOrderDate().toString()))) {
                        product.setpQquantity(product.getpQquantity() + request.getProductQuantity());
                        flag = true;
                        break;
                    } else {
                        flag = false;
                    }
                }
                if (!flag) {
                    Product nProduct = new Product();
                    nProduct.setpName(request.getProduct().getpName());
                    nProduct.setpQquantity(request.getProductQuantity());
                    nProduct.setOrderDate(request.getRequestOrderDate());
                    analyticsProductlict.add(nProduct);
                }
            } else if (request.getRequestOrderDate().equals("2012")) {
                boolean flag = false;
                //for loop for checking whther the same product exists for 2011
                for (Product product : analyticsProductlict) {
                    //if product exists in the same year then add the product quantity
                    if (product.getpName().equals(request.getProduct().getpName()) && product.getOrderDate().equals(request.getRequestOrderDate())) {
                        product.setpQquantity(product.getpQquantity() + request.getProductQuantity());

                        flag = true;
                        break;
                    } else {
                        flag = false;
                    }
                }
                if (!flag) {
                    Product nProduct = new Product();
                    nProduct.setpName(request.getProduct().getpName());
                    nProduct.setpQquantity(request.getProductQuantity());
                    nProduct.setOrderDate(request.getRequestOrderDate());
                    analyticsProductlict.add(nProduct);
                }
            } else if (request.getRequestOrderDate().equals("2013")) {
                boolean flag = false;
                //for loop for checking whther the same product exists for 2011
                for (Product product : analyticsProductlict) {
                    //if product exists in the same year then add the product quantity
                    if (product.getpName().equals(request.getProduct().getpName()) && product.getOrderDate().equals(request.getRequestOrderDate())) {
                        product.setpQquantity(product.getpQquantity() + request.getProductQuantity());

                        flag = true;
                        break;
                    } else {
                        flag = false;
                    }
                }
                if (!flag) {
                    Product nProduct = new Product();
                    nProduct.setpName(request.getProduct().getpName());
                    nProduct.setpQquantity(request.getProductQuantity());
                    nProduct.setOrderDate(request.getRequestOrderDate());
                    analyticsProductlict.add(nProduct);
                }
            } else if (request.getRequestOrderDate().equals("2014")) {
                boolean flag = false;
                //for loop for checking whther the same product exists for 2011
                for (Product product : analyticsProductlict) {
                    //if product exists in the same year then add the product quantity
                    if (product.getpName().equals(request.getProduct().getpName()) && product.getOrderDate().equals(request.getRequestOrderDate())) {
                        product.setpQquantity(product.getpQquantity() + request.getProductQuantity());

                        flag = true;
                        break;
                    } else {
                        flag = false;
                    }
                }
                if (!flag) {
                    Product nProduct = new Product();
                    nProduct.setpName(request.getProduct().getpName());
                    nProduct.setpQquantity(request.getProductQuantity());
                    nProduct.setOrderDate(request.getRequestOrderDate());
                    analyticsProductlict.add(nProduct);
                }
            } else if (request.getRequestOrderDate().equals("2015")) {
                boolean flag = false;
                //for loop for checking whther the same product exists for 2011
                for (Product product : analyticsProductlict) {
                    //if product exists in the same year then add the product quantity
                    if (product.getpName().equals(request.getProduct().getpName()) && product.getOrderDate().equals(request.getRequestOrderDate())) {
                        product.setpQquantity(product.getpQquantity() + request.getProductQuantity());

                        flag = true;
                        break;
                    } else {
                        flag = false;
                    }
                }
                if (!flag) {
                    Product nProduct = new Product();
                    nProduct.setpName(request.getProduct().getpName());
                    nProduct.setpQquantity(request.getProductQuantity());
                    nProduct.setOrderDate(request.getRequestOrderDate());
                    analyticsProductlict.add(nProduct);
                }
            }
        }
        int i = 0;

        //********Testing table***********************
       

        //**************************************
    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jSpinner1CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jSpinner1CaretPositionChanged

    }//GEN-LAST:event_jSpinner1CaretPositionChanged

    private void jSpinner1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jSpinner1InputMethodTextChanged
        // TODO add your handling code here:
        int val = (int) jSpinner1.getValue();
        if (val < 0) {

        } else {
            double x = 0;
            x = product.getpQquantity() * val;
            System.out.println(x);
            jTextField3.setText(String.valueOf(x));
        }


    }//GEN-LAST:event_jSpinner1InputMethodTextChanged

    private void jSpinner1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSpinner1MouseClicked

        // TODO add your handling code here:
    }//GEN-LAST:event_jSpinner1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int val = (int) jSpinner1.getValue();
        if (val > 500) {
            JOptionPane.showMessageDialog(null, "Maximum quantity that can be ordered at a time is 500", "ERROR", JOptionPane.ERROR_MESSAGE);
            jSpinner1.setValue(0);
            return;
        }
        if (val < 0) {

        } else {
            double x = 0;
            x = product.getPrice() * val;
            jTextField3.setText(String.valueOf(x));
        }

    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField actualQuantity;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField messageJTextField;
    private javax.swing.JTextField productName;
    // End of variables declaration//GEN-END:variables
}
